// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  songs     Song[]     @relation("UserSongs")
  playlists Playlist[] @relation("UserPlaylists")
}

model Song {
  id             String     @id @default(uuid())
  title          String
  artist         String
  youtubeId      String
  thumbnail      String?
  duration       String?
  genre          String?
  rating         Int?
  isLiked        Boolean    @default(false)
  purpose        String?
  emotionalState String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  userId         String
  user           User       @relation("UserSongs", fields: [userId], references: [id])
  playlists      PlaylistSong[]
}

model Playlist {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation("UserPlaylists", fields: [userId], references: [id])
  songs       PlaylistSong[]
}

model PlaylistSong {
  id         String   @id @default(uuid())
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String
  song       Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([playlistId, songId])
}
